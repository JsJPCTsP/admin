import streamlit as st
import ccxt
import pandas as pd
import time
import plotly.graph_objects as go
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bybit
exchange = ccxt.bybit({
    'apiKey': 'YOUR_BYBIT_API_KEY',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á API
    'secret': 'YOUR_BYBIT_SECRET',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
})

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
timeframes = {
    '1m': '1m', '5m': '5m', '15m': '15m', '30m': '30m', '1h': '1h',
    '4h': '4h', '1d': '1d', '1w': '1w', '1M': '1M'
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π
st.set_page_config(
    page_title="–ê–¥–º–∏–Ω–∫–∞",
    page_icon="üìà",
    layout="wide",
)

st.markdown(
    """
    <style>
        .main {
            background-color: #f0f2f6;
            padding: 20px;
        }
        .st-emotion-cache-1v0mbdr{
          background-color: #fff !important;
        }
        .st-emotion-cache-16txtl3{
            display: flex;
            gap: 20px;
        }
        .st-emotion-cache-6q9t1s{
            display: flex;
            gap: 20px;
        }
        .st-emotion-cache-1b5596y{
            padding: 20px;
            border-radius: 10px;
            background-color: #fff;
        }
        .st-emotion-cache-10ohe9t{
              background-color: #fff !important;
              border: 1px solid #e0e0e0;
        }
         .st-emotion-cache-8y9k0d{
             margin: auto !important;
         }
    </style>
    """,
    unsafe_allow_html=True,
)

# –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
with st.container():
  col1, col2 = st.columns([1, 2])
  with col1:
    st.header("–ê–¥–º–∏–Ω–∫–∞")

    # –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    selected_timeframe = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", list(timeframes.keys()))

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    if st.button("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key="fetch_data_button"):
        try:
            # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å Bybit
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
               ohlcv = exchange.fetch_ohlcv('BTC/USDT', timeframe=timeframes[selected_timeframe], limit=100)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
            df = pd.DataFrame(ohlcv, columns=['Timestamp', 'Open', 'High', 'Low', 'Close', 'Volume'])
            df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='ms')
            df.set_index('Timestamp', inplace=True)
            
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            st.session_state['data_df'] = df
        except ccxt.ExchangeError as e:
           st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        except Exception as e:
           st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key="clear_data_button"):
       st.session_state.pop('data_df', None)
       st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ (placeholder)
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥", key="start_trailing_button"):
         st.warning("–§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

  with col2:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≥—Ä–∞—Ñ–∏–∫–∞
    if 'data_df' in st.session_state:
      df = st.session_state['data_df']

      # –ì—Ä–∞—Ñ–∏–∫
      st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã BTC/USDT")
      fig = go.Figure(data=[go.Candlestick(x=df.index,
                                         open=df['Open'],
                                         high=df['High'],
                                         low=df['Low'],
                                         close=df['Close'])])
      st.plotly_chart(fig, use_container_width=True)
      # –¢–∞–±–ª–∏—Ü–∞
      st.subheader("–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
      st.dataframe(df.style.background_gradient(cmap='Blues'))
    else:
      st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'.")
